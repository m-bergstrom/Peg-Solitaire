@using BlazorObservers.ObserverLibrary.Services
@using BlazorObservers.ObserverLibrary.Tasks
@using BlazorObservers.ObserverLibrary.JsModels
@using PegSolitaire.Engine.GameState
@using Finaltouch.DragDrop.Components

@implements IAsyncDisposable

@inject ResizeObserverService ResizeService
@inject DragDropInterop DragDropInterop

@rendermode RenderMode.InteractiveAuto

<div class="peg-container" @ref="_ContainerDiv" data-container-id="game-board">
    @if (Board != null)
    {
        foreach (var node in Board.Nodes)
        {
            var transformedNodeX = node.X * _XFactor + _XOffset;
            var transformedNodeY = node.Y * _YFactor + _YOffset;
            var id = GetNodeId(node);
            var style = $"left: {transformedNodeX}px; top: {transformedNodeY}px; width: {_ScaledMarbleImageSize}px; height: {_ScaledMarbleImageSize}px;";
            if (node.Occupied)
            {
                <img id="@id" data-item-id="@id" class="marble node dd-item" src="./_content/PegSolitaire.Components/images/Translucent_sphere_Chocolate.png" style="@style"/>
            }
            else
            {
                <img id="@id" data-container-id="@id" class="space node dd-container" src="./_content/PegSolitaire.Components/images/Indentation_Shadow.png" style="@style"/>
            }
        }
    }
</div>

@code {
    private ElementReference _ContainerDiv;
    private ObserverTask<JsResizeObserverEntry[]>? _ObserverTask;

    private double? _BoardWidth;
    private double? _BoardHeight;

    private double _XFactor;
    private double _XOffset;

    private double _YFactor;
    private double _YOffset;

    // Magic number for how large the marbles are relative to the
    // minimum space between them
    private const float MarbleToSeparationSizeRatio = 0.75F;
    private const int OriginalMarbleImageSize = 1024;
    private double _ScaledMarbleImageSize;

    [Parameter] public GameBoard? Board { get; set; }

    [Parameter] public EventCallback<(GameNode from, GameNode to)> MoveAttempted { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _ObserverTask = await ResizeService.RegisterObserver(HandleResize, _ContainerDiv);

            if (DragDropInterop != null)
            {
                await DragDropInterop.Initialize(DropMarbleRelease, new DragDropOptions());
            }
        }

        if (DragDropInterop != null)
        {
            await DragDropInterop.AddListeners();
        }
    }

    private async Task DropMarbleRelease(DragDropResult arg)
    {
#if DEBUG
        Console.WriteLine($"Dragging {(!string.IsNullOrEmpty(arg.SourceItemId) ? arg.SourceItemId : "N/A")} from {(!string.IsNullOrEmpty(arg.SourceContainerId) ? arg.SourceContainerId : "N/A")} to {(!string.IsNullOrEmpty(arg.TargetItemId) ? arg.TargetItemId : "N/A")} in {(!string.IsNullOrEmpty(arg.TargetContainerId) ? arg.TargetContainerId : "N/A")}");
#endif

        var from = arg.SourceItemId ?? arg.SourceContainerId;
        var to = arg.TargetItemId ?? arg.TargetContainerId;

        if (!string.IsNullOrEmpty(from) && !string.IsNullOrEmpty(to))
        {
            var fromNode = GetNodeFromId(from);
            var toNode = GetNodeFromId(to);

            await MoveAttempted.InvokeAsync((fromNode, toNode));
        }

        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ResizeBoard();
    }

    /// <summary>
    /// Calculates the size of the board display relative to the size
    /// of the board model
    /// </summary>
    /// <remarks>
    /// The board model can vary widely in width and height; it can
    /// also feature negative position values.
    /// </remarks>
    private void ResizeBoard()
    {
        if (Board != null && _BoardWidth != null && _BoardHeight != null)
        {
            var modelMarbleSize = GetMinNodeDistance(Board) * MarbleToSeparationSizeRatio;

            var maxX = Board.Nodes.Max(n => n.X);
            var minX = Board.Nodes.Min(n => n.X);
            var maxY = Board.Nodes.Max(n => n.Y);
            var minY = Board.Nodes.Min(n => n.Y);

            // Include half a marble size on the left plus half a
            // marble size on the right
            var xDiff = maxX - minX + modelMarbleSize;
            var yDiff = maxY - minY + modelMarbleSize;

            _XFactor = _YFactor = Math.Min(_BoardHeight.Value / yDiff, _BoardWidth.Value / xDiff) * 0.9;
            _ScaledMarbleImageSize = modelMarbleSize * _XFactor;

            _XOffset = 0 - minX * _XFactor + (_BoardWidth.Value - (maxX - minX) * _XFactor - _ScaledMarbleImageSize) / 2;
            _YOffset = 0 - minY * _YFactor + (_BoardHeight.Value - (maxY - minY) * _YFactor - _ScaledMarbleImageSize) / 2;

#if DEBUG
            Console.WriteLine($"This component is {_BoardWidth} wide and {_BoardHeight} tall.<br>");
            Console.WriteLine($"Marble model size: {_MinNodeDistance * MarbleToSeparationSizeRatio}<br>");
            Console.WriteLine($"Marble image size: {_ScaledMarbleImageSize}<br>");
            Console.WriteLine($"Minimum Node Distance: {_MinNodeDistance}<br>");
            Console.WriteLine($"Scale: {_XFactor}");
#endif

            StateHasChanged();
        }
    }

    private double? _MinNodeDistance;

    /// <summary>
    /// Gets the minimum distance between nodes in the board model
    /// </summary>
    private double GetMinNodeDistance(GameBoard board)
    {
        if (_MinNodeDistance != null)
            return _MinNodeDistance.Value;
        var minDistance = float.PositiveInfinity;

        foreach (var fromNode in board.Nodes)
        foreach (var toNode in fromNode.Adjacent)
            minDistance = Math.Min(minDistance, (float)Math.Sqrt(Math.Pow(toNode.X - fromNode.X, 2) + Math.Pow(toNode.Y - fromNode.Y, 2)));
        _MinNodeDistance = minDistance;
        return _MinNodeDistance.Value;
    }

    private void HandleResize(JsResizeObserverEntry[] entries)
    {
        var lastSize = entries.LastOrDefault();
        if (lastSize != null)
        {
            _BoardWidth = lastSize.ContentBoxSize.InlineSize;
            _BoardHeight = lastSize.ContentBoxSize.BlockSize;
            ResizeBoard();
        }
    }

    public async ValueTask DisposeAsync()
    {
        _ObserverTask?.HaltTaskTriggering();
        _ObserverTask?.ResumeTaskTriggering();
    }

    private static string GetNodeId(GameNode node)
    {
        return $"node-X{node.X}Y{node.Y}";
    }

    private static GameNode GetNodeFromId(string id)
    {
        const int preambleLength = 6; //"node-X".Length;
        var coordinates = id[preambleLength..].Split("Y").Select(float.Parse).ToArray();
        return new GameNode(coordinates[0], coordinates[1]);
    }

}